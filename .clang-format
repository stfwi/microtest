---
#
# @file .clang-format
# @requires clang-format version >=17.0.0
# @author sw
#
# c/c++ coding style auto formatting using clang-format.
#
#--
Language: Cpp
Standard: 'c++14'
ColumnLimit: '120'
TabWidth: '2'
IndentWidth: '2'
UseTab: Never
LineEnding: 'LF'
InsertNewlineAtEOF: 'true'
AccessModifierOffset: '-2'
ContinuationIndentWidth: '2'
#--
AlignAfterOpenBracket: AlwaysBreak
AlignConsecutiveAssignments: 'false'
AlignConsecutiveBitFields: 'true'
AlignConsecutiveDeclarations: 'false'
AlignConsecutiveMacros: 'false'
AlignEscapedNewlines: Left
AlignTrailingComments: 'true'
AlignArrayOfStructures: 'Right'
AllowAllArgumentsOnNextLine: 'true'
AllowAllConstructorInitializersOnNextLine: 'true'
AllowAllParametersOfDeclarationOnNextLine: 'true'
AllowShortBlocksOnASingleLine: 'true'
AllowShortCaseLabelsOnASingleLine: 'true'
AllowShortIfStatementsOnASingleLine: WithoutElse
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: 'true'
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: 'false'
AlwaysBreakTemplateDeclarations: 'Yes'
BinPackArguments: 'false'
BinPackParameters: 'false'
#--
BreakBeforeBraces: Custom
BraceWrapping:
  AfterNamespace: false
  AfterClass: true
  AfterStruct: true
  AfterUnion: true
  AfterFunction: true
  AfterEnum: false
  AfterControlStatement: 'Never'
  AfterCaseLabel: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false
#--
# clang17 BreakBeforeInlineASMColon: 'OnlyMultiline'
BreakBeforeTernaryOperators: 'true'
BreakBeforeBinaryOperators: 'NonAssignment'
BreakBeforeConceptDeclarations: 'true' # clang17->'Allowed'
BreakAfterJavaFieldAnnotations: 'true'
BreakAfterAttributes: 'Always'
BreakArrays: false
BreakStringLiterals: 'true'
BreakConstructorInitializers: 'AfterColon'
BreakInheritanceList: 'AfterColon'
#--
CompactNamespaces: 'true'
ConstructorInitializerAllOnOneLineOrOnePerLine: 'true'
ConstructorInitializerIndentWidth: '4'
PackConstructorInitializers: 'CurrentLine'
ReflowComments: 'true'
Cpp11BracedListStyle: 'true'
DisableFormat: 'false'
FixNamespaceComments: 'false'
IndentPPDirectives: BeforeHash
IndentWrappedFunctionNames: 'false'
PPIndentWidth: '2'
JavaScriptQuotes: Leave
KeepEmptyLinesAtTheStartOfBlocks: 'false'
MaxEmptyLinesToKeep: '1'
NamespaceIndentation: All
PointerAlignment: 'Left'
ReferenceAlignment: 'Left'
DerivePointerAlignment: 'true'
#--
QualifierAlignment: 'Custom'
QualifierOrder: ['static', 'friend', 'inline', 'constexpr', 'const', 'volatile', 'restrict', 'type']
#--
SortIncludes: 'false'
SortUsingDeclarations: 'false'
SpaceAfterCStyleCast: 'false'
SpaceAfterLogicalNot: 'false'
SpaceAfterTemplateKeyword: 'false'
SpaceAroundPointerQualifiers: 'Default'
SpaceBeforeAssignmentOperators: 'true'
SpaceBeforeCaseColon: 'false'
SpaceBeforeCpp11BracedList: 'false'
SpaceBeforeCtorInitializerColon: 'true'
SpaceBeforeInheritanceColon: 'true'
SpaceBeforeParens: Never
SpaceBeforeRangeBasedForLoopColon: 'false'
SpaceBeforeSquareBrackets: 'false'
SpaceInEmptyBlock: 'false'
SpaceInEmptyParentheses: 'false'
SpacesInConditionalStatement: 'false'
SpacesBeforeTrailingComments: '2'
SpacesInAngles: 'Never'
SpacesInContainerLiterals: 'false'
SpacesInCStyleCastParentheses: 'false'
SpacesInParentheses: 'false'
SpacesInSquareBrackets: 'false'
EmptyLineAfterAccessModifier: 'Always'
EmptyLineBeforeAccessModifier: 'LogicalBlock'
IndentAccessModifiers: 'false'
IndentCaseBlocks: 'true'
IndentCaseLabels: 'true'
IndentExternBlock: 'Indent'
IndentGotoLabels: 'false' # who needs that?
IndentRequires: 'true' # clang17 -> IndentRequiresClause: 'true'
#--
InsertBraces: 'true' # enforce if {}
RemoveSemicolon: 'true' # remove unneeded ;, e.g. after closing function block.
InsertTrailingCommas: 'Wrapped'
LambdaBodyIndentation: 'Signature'
RequiresClausePosition: 'OwnLine'
RequiresExpressionIndentation: 'OuterScope'
SeparateDefinitionBlocks: 'Always'
ShortNamespaceLines: '10'
#--
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
#--
#PenaltyBreakAssignment: 1
#PenaltyBreakBeforeFirstCallParameter: 1
#PenaltyBreakComment: 1
#PenaltyBreakFirstLessLess: 1
#PenaltyBreakOpenParenthesis: 1
#PenaltyBreakString: 1
#PenaltyBreakTemplateDeclaration: 1
#PenaltyExcessCharacter: 1
#PenaltyIndentedWhitespace: 1
#PenaltyReturnTypeOnItsOwnLine: 1
#--
#CommentPragmas: ''
#ForEachMacros:''
#IfMacros: ''
#MacroBlockBegin: ''
#MacroBlockEnd: ''
#NamespaceMacros: ''
#RawStringFormats: ''
#StatementAttributeLikeMacros: ''
#StatementMacros: ''
#TypenameMacros: ''
#WhitespaceSensitiveMacros: ''
...
